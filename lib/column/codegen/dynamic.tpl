
// Code generated by make codegen DO NOT EDIT.
// source: lib/column/codegen/dynamic.tpl

package column

import (
	"database/sql"
	"encoding/json"
	"github.com/ClickHouse/ch-go/proto"
	"github.com/google/uuid"
	"github.com/paulmach/orb"
	"time"
)

// inferClickHouseTypeFromGoType takes a Go interface{} and converts it to a ClickHouse type.
// Returns empty string if type was not matched.
// This is best effort and does not work for all types.
// Optimally, users should provide a type using DynamicWithType.
func inferClickHouseTypeFromGoType(v any) string {
    switch v.(type) {
    {{- range . }}
    case {{ .GoType }}:
        return "{{ .ChType }}"
    case *{{ .GoType }}:
        return "{{ .ChType }}"
    {{- end }}
    {{- range . }}
    {{- if .SkipArray }}
    {{- else}}
    case []{{ .GoType }}:
        return "Array({{ .ChType }})"
    {{- end}}
    case []*{{ .GoType }}:
        return "Array({{ .ChType }})"
    {{- end }}
    {{- range . }}
    case map[string]{{ .GoType }}:
        return "Map(String, {{ .ChType }})"
    {{- end }}
    default:
        return ""
    }
}
