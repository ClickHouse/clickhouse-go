// +build amd64 arm64

// Code generated by make codegen DO NOT EDIT.
// source: lib/column/codegen/column_safe.tpl

package column

import (
	"unsafe"
	"reflect"
	"github.com/ClickHouse/clickhouse-go/v2/lib/binary"
)


{{- range . }}

func (col *{{ .ChType }}) Decode(decoder *binary.Decoder, rows int) error {
	if rows == 0 {
		return nil
	}
	const size = {{ .Size }} / 8

	*col = append(*col, make([]{{ .GoType }}, rows)...)

	slice := *(*reflect.SliceHeader)(unsafe.Pointer(col))
	slice.Len *= size
	slice.Cap *= size

	dst := *(*[]byte)(unsafe.Pointer(&slice))

	if err := decoder.Raw(dst); err != nil {
		return err
	}
	return nil
}

func (col *{{ .ChType }}) Encode(encoder *binary.Encoder) error {
	if len(*col) == 0 {
		return nil
	}
	const size = {{ .Size }} / 8
	scratch := make([]byte, size*len(*col))
	{
		slice := *(*reflect.SliceHeader)(unsafe.Pointer(col))
		slice.Len *= size
		slice.Cap *= size
		src := *(*[]byte)(unsafe.Pointer(&slice))

		copy(scratch, src)
	}
	return encoder.Raw(scratch)
}

{{- end }}
